name: check
on:
  push:

jobs:
  testsuite:
    strategy:
      fail-fast: false
      matrix:
        # We test the two newest and the two oldest versions of each of the two compilers
        config: [Debug, Release]
        os: [ubuntu-22.04]
        compiler: [clang-14, g++-12]
    runs-on: ${{ matrix.os }}
    env:
      SDL_VIDEODRIVER: 'x11'
      DISPLAY: ':99.0'
      # TODO: Under Xvfb, the usual X11 memory leaks show up as an unsymbolized
      # <unknown module> making them impossible to suppress. So we disable all
      # memory leaks checking in the testsuite for now.
      ASAN_OPTIONS: 'detect_leaks=0'
      LSAN_OPTIONS: 'suppressions=${{ github.workspace }}/asan_3rd_party_leaks'
      CXX: '${{ matrix.compiler }}'
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - name: Installing dependencies
      run: sh ./.github/scripts/install_deps.sh
      
  vcpkg:
    name: Check vcpkg
    runs-on: windows-2022
    strategy:
      matrix:
        arch:
          - x64
    env:
      VCPKG_ROOT: C:\vcpkg
      VCPKG_VERSION: ${{ github.workspace }}/vcpkg_version
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg/bincache
      VCPKG_TARGET_TRIPLET: ${{ matrix.arch }}-windows-static

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Get vcpkg version
      id: version
      run: |
        cd ${{ env.VCPKG_ROOT }}
        $env:HEAD = git rev-parse --short HEAD
        echo "::set-output name=head::$env:HEAD"
    - name: Check vcpkg version
      uses: actions/cache@v2
      with:
        path: ${{ env.VCPKG_VERSION }}
        key: |
          vcpkg-${{ github.ref }}-${{ steps.version.outputs.head }}
        restore-keys: |
          vcpkg-refs/heads/master-
    - name: Create cache directory
      id: prepare
      run: |
        mkdir -p ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
        cd ${{ env.VCPKG_ROOT }}
        if (Test-Path ${{ env.VCPKG_VERSION }}) {
          $env:HEAD = Get-Content ${{ env.VCPKG_VERSION }}
          git checkout $env:HEAD
        }
        $env:HEAD = git rev-parse --short HEAD
        Set-Content ${{ env.VCPKG_VERSION }} $env:HEAD
        echo "::set-output name=head::$env:HEAD"
    - name: Restore vcpkg and its artifacts.
      uses: actions/cache@v2
      with:
        path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
        key: |
          ${{ hashFiles( '.github/workflows/build.yaml' ) }}-${{ steps.prepare.outputs.head }}-${{ matrix.arch }}
    - name: Installing dependencies
      run: |
        choco install innosetup
        vcpkg install --disable-metrics --triplet=${{ env.VCPKG_TARGET_TRIPLET }} asio gettext libpng icu glbinding sdl2 sdl2-ttf sdl2-mixer[libvorbis,libflac,mpg123] sdl2-image[libjpeg-turbo,tiff] graphite2 harfbuzz opusfile libwebp
