name: Build
on:
  schedule:
    # Daily at 2:00 a.m.
    - cron: '0 2 * * *'
  push:
    branches: [ master ]

jobs:
  vcpkg:
    name: Check vcpkg
    runs-on: windows-latest
    env:
      VCPKG_ROOT: C:\vcpkg
      VCPKG_VERSION: ${{ github.workspace }}/vcpkg_version
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg-bincache
      VCPKG_TARGET_TRIPLET: x64-windows-static
      CACHE: ${{ github.workspace }}/checked

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: Restore transient info
      uses: actions/cache@v2
      with:
        path: ${{ env.CACHE }}
        key: |
          ${{ hashFiles( 'vcpkg_version' ) }}
    - name: Check version
      id: check
      run: |
        cd ${{ env.VCPKG_ROOT }}
        $env:LAST = Get-Content ${{ env.VCPKG_VERSION }}
        $env:HEAD = git rev-parse --short HEAD
        $env:BRANCH = "vcpkg-$env:HEAD"
        if ("$env:LAST" -Match "$env:HEAD") {
          echo "No update availabe"
          exit 0
        } elseif ( Test-Path ${{ env.CACHE }} ) {
          $env:CHECKED = Get-Content ${{ env.CACHE }}
          if ( "$env:CHECKED" -Match "$env:HEAD" ) {
            echo "Version $env:HEAD already checked"
            exit 0
          }
        }
        echo "vcpkg updated from $env:LAST to $env:HEAD"
        echo "::set-output name=branch::$env:BRANCH"
        echo "::set-output name=from::$env:LAST"
        echo "::set-output name=to::$env:HEAD"
    - name: Update version
      if: steps.check.outputs.to != ''
      id: update
      run: |
        git checkout -b ${{ steps.check.outputs.branch }}
        Set-Content ${{ env.VCPKG_VERSION }} ${{ steps.check.outputs.to }}
        Set-Content ${{ env.CACHE }} ${{ steps.check.outputs.to }}
        git config --global user.name "bunnybot"
        git config --global user.email "bunnybot@widelands.org"
        git add ${{ env.VCPKG_VERSION }}
        git commit -m "Update vcpkg"
        git push origin ${{ steps.check.outputs.branch }}
    - name: Create pull request for ${{ steps.check.outputs.branch }}
      if: steps.check.outputs.to != ''
      id: create-pr
      uses: actions/github-script@v2
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let response = await github.pulls.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "Update vcpkg to ${{ steps.check.outputs.to }}",
            head: "${{ steps.check.outputs.branch }}",
            base: "master",
            body: `Update vcpkg from **[${{ steps.check.outputs.from }}](https://github.com/microsoft/vcpkg/commit/${{ steps.check.outputs.from }})** to **[${{ steps.check.outputs.to }}](https://github.com/microsoft/vcpkg/commit/${{ steps.check.outputs.to }})**`
          });
          return response.data.number
    - name: Build packages
      if: steps.check.outputs.to != ''
      id: build
      run: |
        echo "::set-output name=success::success"
        mkdir ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
        vcpkg install --disable-metrics --triplet=${{ env.VCPKG_TARGET_TRIPLET }} libweb || echo "::set-output name=success::fail"
        7z a -t7z -m0=lzma -mx=9 -mfb=64 -md=32m -ms=on ${{ steps.check.outputs.branch }}.7z "${{ env.VCPKG_DEFAULT_BINARY_CACHE }}"
    - name: Store cache
      if: steps.build.outputs.success == 'success'
      uses: actions/upload-artifact@v2
      with:
        name: vcpkg binary cache for ${{ steps.check.outputs.to }}
        path: ${{ github.workspace }}\${{ steps.check.outputs.branch }}.7z
    - name: Review pull request for ${{ steps.check.outputs.branch }}
      if: steps.check.outputs.to != ''
      id: review-pr
      uses: actions/github-script@v2
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          await github.pulls.createReview({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: ${{ steps.create-pr.outputs.result }},
            event: "COMMENT"
            body: `Build result: ${{ steps.build.outputs.success }}`
          })
