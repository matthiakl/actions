name: Build
on:
  pull_request:
    types: [ opened, reopened, synchronize ]
  push:
    branches: [ master ]

jobs:
  vcpkg-packages:
    strategy:
      matrix:
        arch: [x64, x86]
    name: vcpkg packages for Windows ${{ matrix.arch }}
    runs-on: windows-2022
    outputs:
      vcpkg_key: ${{ ssteps.prepare.outputs.vcpkg_key }}
    env:
      VCPKG_ROOT: C:\vcpkg
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg/bincache
      VCPKG_TARGET_TRIPLET: ${{ matrix.arch }}-windows-static
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - name: "Create cache directory"
      id: prepare
      run: |
        mkdir -p $VCPKG_DEFAULT_BINARY_CACHE
        cd ${{ env.VCPKG_ROOT }}
        HEAD=$(git rev-parse --short HEAD)
        echo "vcpkg_key=${{ hashFiles( '.github/workflows/build.yaml' ) }}-${HEAD}" >> $GITHUB_OUTPUT
        # List all dependencies once
        echo "vcpkg_packages='asio gettext'" >> $GITHUB_OUTPUT
        #  libpng icu glbinding sdl2 sdl2-ttf sdl2-mixer[libvorbis,libflac,mpg123] sdl2-image[libjpeg-turbo,tiff] graphite2 harfbuzz opusfile libwebp'
      shell: bash
    - name: Restore vcpkg and its artifacts.
      uses: actions/cache@v3
      with:
        path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
        key: |
          ${{ steps.prepare.outputs.vcpkg_key }}-${{ matrix.arch }}
    - name: Installing dependencies
      run: |
        sh ./install-dependencies.sh vcpkg --triplet=${{ env.VCPKG_TARGET_TRIPLET }}
        vcpkg install --disable-metrics --triplet=${{ env.VCPKG_TARGET_TRIPLET }} ${{ steps.prepare.outputs.vcpkg_packages }}
      shell: bash

  windows-msvc:
    # inspired by https://github.com/lukka/CppCMakeVcpkgTemplate/blob/main/.github/workflows/hosted-pure-workflow.yml
    needs: vcpkg-packages
    strategy:
      matrix:
        config: [Debug, Release]
        arch: [x64, x86]
    name: Windows ${{ matrix.config }} ${{ matrix.arch }} Build (MSVC)
    runs-on: windows-2022
    env:
      VCPKG_ROOT: C:\vcpkg
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg/bincache
      VCPKG_TARGET_TRIPLET: ${{ matrix.arch }}-windows-static

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - name: "Create cache directory"
      id: prepare
      run: |
        mkdir -p $VCPKG_DEFAULT_BINARY_CACHE
      shell: bash
    - name: Restore vcpkg and its artifacts.
      uses: actions/cache@v3
      with:
        path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
        key: |
          ${{needs.vcpkg-packages.outputs.vcpkg_key}}-${{ matrix.arch }}
    - name: Installing dependencies
      run: |
        choco install innosetup
        vcpkg install --disable-metrics --triplet=${{ env.VCPKG_TARGET_TRIPLET }} asio gettext libpng icu glbinding sdl2 sdl2-ttf sdl2-mixer[libvorbis,libflac,mpg123] sdl2-image[libjpeg-turbo,tiff] graphite2 harfbuzz opusfile libwebp
    - name: Dummy
      run: echo "${{ github.workspace }}\Widelands-${{ github.sha }}-MSVC-${{ matrix.config }}-${{ matrix.arch }}" > ${{ github.workspace }}\Widelands-${{ github.sha }}-MSVC-${{ matrix.config }}-${{ matrix.arch }}.exe
    - name: Uploading installer
      uses: actions/upload-artifact@v2
      with:
        name: Widelands ${{ matrix.config }} ${{ matrix.arch }} Installer (MSVC)
        path: ${{ github.workspace }}\Widelands-${{ github.sha }}-MSVC-${{ matrix.config }}-${{ matrix.arch }}.exe

  windows:
    strategy:
      matrix:
        config:
          - Release
          - Debug
        arch:
          - x64
          - x86
    name: Windows ${{ matrix.config }} ${{ matrix.arch }} Build (MinGW)
    runs-on: windows-latest
    steps:
    - name: Dummy
      run: echo "${{ github.workspace }}\Widelands-${{ github.sha }}-MinGW-${{ matrix.config }}-${{ matrix.arch }}" > ${{ github.workspace }}\Widelands-${{ github.sha }}-MinGW-${{ matrix.config }}-${{ matrix.arch }}.exe
    - name: Uploading installer
      uses: actions/upload-artifact@v2
      with:
        name: Widelands ${{ matrix.config }} ${{ matrix.arch }} Installer (MinGW)
        path: ${{ github.workspace }}\Widelands-${{ github.sha }}-MinGW-${{ matrix.config }}-${{ matrix.arch }}.exe

  macos:
    strategy:
      matrix:
        config:
          #- release
          - debug
        compiler:
          - clang
    name: MacOS ${{ matrix.config }} ${{ matrix.compiler }}
    runs-on: macos-11
    steps:
    - name: Dummy
      run: echo "${{ github.workspace }}/Widelands-${{ github.sha }}-${{ matrix.config }}-${{ matrix.compiler }}" > ${{ github.workspace }}/Widelands-${{ github.sha }}-${{ matrix.config }}-${{ matrix.compiler }}.dmg
    - name: Uploading DMG
      uses: actions/upload-artifact@v2
      with:
        name: Widelands ${{ matrix.config }} ${{ matrix.compiler }} MacOS 11 AppImage
        path: ${{ github.workspace }}/Widelands-${{ github.sha }}-${{ matrix.config }}-${{ matrix.compiler }}.dmg

